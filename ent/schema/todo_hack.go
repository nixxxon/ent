// Code generated by enthistory, DO NOT EDIT.
package schema

import (
	"time"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

// TodoHack holds the schema definition for the TodoHistory entity.
type TodoHack struct {
	ent.Schema
}

// Annotations of the TodoHack.
func (TodoHack) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{
			Table: "todo_history",
		},
		enthistory.Annotations{
			IsHistory: false,
			Exclude:   true,
		},
	}
}

// Fields of the TodoHack.
func (TodoHack) Fields() []ent.Field {
	historyFields := []ent.Field{
		field.Time("history_time").
			Default(time.Now).
			Immutable(),
		field.UUID("ref", uuid.UUID{}).
			Immutable().
			Optional().
			Annotations(
				entgql.Annotation{
					Type: "ID",
				},
			),
		field.Enum("operation").
			GoType(enthistory.OpType("")).
			Immutable(),
	}

	original := Todo{}
	for _, field := range original.Fields() {
		historyFields = append(historyFields, field)
	}

	return historyFields
}

// Mixin of the TodoHack.
func (TodoHack) Mixin() []ent.Mixin {
	return Todo{}.Mixin()
}
