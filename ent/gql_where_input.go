// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/flume/enthistory"
	"github.com/google/uuid"
	"github.com/nixxxon/entdemo/ent/predicate"
	"github.com/nixxxon/entdemo/ent/todo"
	"github.com/nixxxon/entdemo/ent/todohack"
)

// TodoWhereInput represents a where input for filtering Todo queries.
type TodoWhereInput struct {
	Predicates []predicate.Todo  `json:"-"`
	Not        *TodoWhereInput   `json:"not,omitempty"`
	Or         []*TodoWhereInput `json:"or,omitempty"`
	And        []*TodoWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "other_id" field predicates.
	OtherID       *uuid.UUID  `json:"otherID,omitempty"`
	OtherIDNEQ    *uuid.UUID  `json:"otherIDNEQ,omitempty"`
	OtherIDIn     []uuid.UUID `json:"otherIDIn,omitempty"`
	OtherIDNotIn  []uuid.UUID `json:"otherIDNotIn,omitempty"`
	OtherIDGT     *uuid.UUID  `json:"otherIDGT,omitempty"`
	OtherIDGTE    *uuid.UUID  `json:"otherIDGTE,omitempty"`
	OtherIDLT     *uuid.UUID  `json:"otherIDLT,omitempty"`
	OtherIDLTE    *uuid.UUID  `json:"otherIDLTE,omitempty"`
	OtherIDIsNil  bool        `json:"otherIDIsNil,omitempty"`
	OtherIDNotNil bool        `json:"otherIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TodoWhereInput) AddPredicates(predicates ...predicate.Todo) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TodoWhereInput filter on the TodoQuery builder.
func (i *TodoWhereInput) Filter(q *TodoQuery) (*TodoQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTodoWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTodoWhereInput is returned in case the TodoWhereInput is empty.
var ErrEmptyTodoWhereInput = errors.New("ent: empty predicate TodoWhereInput")

// P returns a predicate for filtering todos.
// An error is returned if the input is empty or invalid.
func (i *TodoWhereInput) P() (predicate.Todo, error) {
	var predicates []predicate.Todo
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, todo.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Todo, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, todo.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Todo, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, todo.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, todo.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, todo.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, todo.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, todo.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, todo.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, todo.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, todo.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, todo.IDLTE(*i.IDLTE))
	}
	if i.OtherID != nil {
		predicates = append(predicates, todo.OtherIDEQ(*i.OtherID))
	}
	if i.OtherIDNEQ != nil {
		predicates = append(predicates, todo.OtherIDNEQ(*i.OtherIDNEQ))
	}
	if len(i.OtherIDIn) > 0 {
		predicates = append(predicates, todo.OtherIDIn(i.OtherIDIn...))
	}
	if len(i.OtherIDNotIn) > 0 {
		predicates = append(predicates, todo.OtherIDNotIn(i.OtherIDNotIn...))
	}
	if i.OtherIDGT != nil {
		predicates = append(predicates, todo.OtherIDGT(*i.OtherIDGT))
	}
	if i.OtherIDGTE != nil {
		predicates = append(predicates, todo.OtherIDGTE(*i.OtherIDGTE))
	}
	if i.OtherIDLT != nil {
		predicates = append(predicates, todo.OtherIDLT(*i.OtherIDLT))
	}
	if i.OtherIDLTE != nil {
		predicates = append(predicates, todo.OtherIDLTE(*i.OtherIDLTE))
	}
	if i.OtherIDIsNil {
		predicates = append(predicates, todo.OtherIDIsNil())
	}
	if i.OtherIDNotNil {
		predicates = append(predicates, todo.OtherIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, todo.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, todo.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, todo.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, todo.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, todo.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, todo.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, todo.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, todo.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, todo.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, todo.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, todo.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, todo.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, todo.NameContainsFold(*i.NameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTodoWhereInput
	case 1:
		return predicates[0], nil
	default:
		return todo.And(predicates...), nil
	}
}

// TodoHackWhereInput represents a where input for filtering TodoHack queries.
type TodoHackWhereInput struct {
	Predicates []predicate.TodoHack  `json:"-"`
	Not        *TodoHackWhereInput   `json:"not,omitempty"`
	Or         []*TodoHackWhereInput `json:"or,omitempty"`
	And        []*TodoHackWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref       *uuid.UUID  `json:"ref,omitempty"`
	RefNEQ    *uuid.UUID  `json:"refNEQ,omitempty"`
	RefIn     []uuid.UUID `json:"refIn,omitempty"`
	RefNotIn  []uuid.UUID `json:"refNotIn,omitempty"`
	RefGT     *uuid.UUID  `json:"refGT,omitempty"`
	RefGTE    *uuid.UUID  `json:"refGTE,omitempty"`
	RefLT     *uuid.UUID  `json:"refLT,omitempty"`
	RefLTE    *uuid.UUID  `json:"refLTE,omitempty"`
	RefIsNil  bool        `json:"refIsNil,omitempty"`
	RefNotNil bool        `json:"refNotNil,omitempty"`

	// "operation" field predicates.
	Operation      *enthistory.OpType  `json:"operation,omitempty"`
	OperationNEQ   *enthistory.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []enthistory.OpType `json:"operationIn,omitempty"`
	OperationNotIn []enthistory.OpType `json:"operationNotIn,omitempty"`

	// "other_id" field predicates.
	OtherID       *uuid.UUID  `json:"otherID,omitempty"`
	OtherIDNEQ    *uuid.UUID  `json:"otherIDNEQ,omitempty"`
	OtherIDIn     []uuid.UUID `json:"otherIDIn,omitempty"`
	OtherIDNotIn  []uuid.UUID `json:"otherIDNotIn,omitempty"`
	OtherIDGT     *uuid.UUID  `json:"otherIDGT,omitempty"`
	OtherIDGTE    *uuid.UUID  `json:"otherIDGTE,omitempty"`
	OtherIDLT     *uuid.UUID  `json:"otherIDLT,omitempty"`
	OtherIDLTE    *uuid.UUID  `json:"otherIDLTE,omitempty"`
	OtherIDIsNil  bool        `json:"otherIDIsNil,omitempty"`
	OtherIDNotNil bool        `json:"otherIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TodoHackWhereInput) AddPredicates(predicates ...predicate.TodoHack) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TodoHackWhereInput filter on the TodoHackQuery builder.
func (i *TodoHackWhereInput) Filter(q *TodoHackQuery) (*TodoHackQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTodoHackWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTodoHackWhereInput is returned in case the TodoHackWhereInput is empty.
var ErrEmptyTodoHackWhereInput = errors.New("ent: empty predicate TodoHackWhereInput")

// P returns a predicate for filtering todohacks.
// An error is returned if the input is empty or invalid.
func (i *TodoHackWhereInput) P() (predicate.TodoHack, error) {
	var predicates []predicate.TodoHack
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, todohack.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TodoHack, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, todohack.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TodoHack, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, todohack.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, todohack.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, todohack.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, todohack.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, todohack.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, todohack.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, todohack.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, todohack.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, todohack.IDLTE(*i.IDLTE))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, todohack.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, todohack.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, todohack.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, todohack.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, todohack.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, todohack.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, todohack.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, todohack.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, todohack.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, todohack.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, todohack.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, todohack.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, todohack.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, todohack.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, todohack.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, todohack.RefLTE(*i.RefLTE))
	}
	if i.RefIsNil {
		predicates = append(predicates, todohack.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, todohack.RefNotNil())
	}
	if i.Operation != nil {
		predicates = append(predicates, todohack.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, todohack.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, todohack.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, todohack.OperationNotIn(i.OperationNotIn...))
	}
	if i.OtherID != nil {
		predicates = append(predicates, todohack.OtherIDEQ(*i.OtherID))
	}
	if i.OtherIDNEQ != nil {
		predicates = append(predicates, todohack.OtherIDNEQ(*i.OtherIDNEQ))
	}
	if len(i.OtherIDIn) > 0 {
		predicates = append(predicates, todohack.OtherIDIn(i.OtherIDIn...))
	}
	if len(i.OtherIDNotIn) > 0 {
		predicates = append(predicates, todohack.OtherIDNotIn(i.OtherIDNotIn...))
	}
	if i.OtherIDGT != nil {
		predicates = append(predicates, todohack.OtherIDGT(*i.OtherIDGT))
	}
	if i.OtherIDGTE != nil {
		predicates = append(predicates, todohack.OtherIDGTE(*i.OtherIDGTE))
	}
	if i.OtherIDLT != nil {
		predicates = append(predicates, todohack.OtherIDLT(*i.OtherIDLT))
	}
	if i.OtherIDLTE != nil {
		predicates = append(predicates, todohack.OtherIDLTE(*i.OtherIDLTE))
	}
	if i.OtherIDIsNil {
		predicates = append(predicates, todohack.OtherIDIsNil())
	}
	if i.OtherIDNotNil {
		predicates = append(predicates, todohack.OtherIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, todohack.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, todohack.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, todohack.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, todohack.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, todohack.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, todohack.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, todohack.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, todohack.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, todohack.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, todohack.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, todohack.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, todohack.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, todohack.NameContainsFold(*i.NameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTodoHackWhereInput
	case 1:
		return predicates[0], nil
	default:
		return todohack.And(predicates...), nil
	}
}
