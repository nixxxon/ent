// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flume/enthistory"
	"github.com/google/uuid"
	"github.com/nixxxon/entdemo/ent/todohack"
)

// TodoHackCreate is the builder for creating a TodoHack entity.
type TodoHackCreate struct {
	config
	mutation *TodoHackMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (thc *TodoHackCreate) SetHistoryTime(t time.Time) *TodoHackCreate {
	thc.mutation.SetHistoryTime(t)
	return thc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (thc *TodoHackCreate) SetNillableHistoryTime(t *time.Time) *TodoHackCreate {
	if t != nil {
		thc.SetHistoryTime(*t)
	}
	return thc
}

// SetRef sets the "ref" field.
func (thc *TodoHackCreate) SetRef(u uuid.UUID) *TodoHackCreate {
	thc.mutation.SetRef(u)
	return thc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (thc *TodoHackCreate) SetNillableRef(u *uuid.UUID) *TodoHackCreate {
	if u != nil {
		thc.SetRef(*u)
	}
	return thc
}

// SetOperation sets the "operation" field.
func (thc *TodoHackCreate) SetOperation(et enthistory.OpType) *TodoHackCreate {
	thc.mutation.SetOperation(et)
	return thc
}

// SetOtherID sets the "other_id" field.
func (thc *TodoHackCreate) SetOtherID(u uuid.UUID) *TodoHackCreate {
	thc.mutation.SetOtherID(u)
	return thc
}

// SetNillableOtherID sets the "other_id" field if the given value is not nil.
func (thc *TodoHackCreate) SetNillableOtherID(u *uuid.UUID) *TodoHackCreate {
	if u != nil {
		thc.SetOtherID(*u)
	}
	return thc
}

// SetName sets the "name" field.
func (thc *TodoHackCreate) SetName(s string) *TodoHackCreate {
	thc.mutation.SetName(s)
	return thc
}

// SetID sets the "id" field.
func (thc *TodoHackCreate) SetID(u uuid.UUID) *TodoHackCreate {
	thc.mutation.SetID(u)
	return thc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (thc *TodoHackCreate) SetNillableID(u *uuid.UUID) *TodoHackCreate {
	if u != nil {
		thc.SetID(*u)
	}
	return thc
}

// Mutation returns the TodoHackMutation object of the builder.
func (thc *TodoHackCreate) Mutation() *TodoHackMutation {
	return thc.mutation
}

// Save creates the TodoHack in the database.
func (thc *TodoHackCreate) Save(ctx context.Context) (*TodoHack, error) {
	thc.defaults()
	return withHooks(ctx, thc.sqlSave, thc.mutation, thc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (thc *TodoHackCreate) SaveX(ctx context.Context) *TodoHack {
	v, err := thc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thc *TodoHackCreate) Exec(ctx context.Context) error {
	_, err := thc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thc *TodoHackCreate) ExecX(ctx context.Context) {
	if err := thc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thc *TodoHackCreate) defaults() {
	if _, ok := thc.mutation.HistoryTime(); !ok {
		v := todohack.DefaultHistoryTime()
		thc.mutation.SetHistoryTime(v)
	}
	if _, ok := thc.mutation.ID(); !ok {
		v := todohack.DefaultID()
		thc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thc *TodoHackCreate) check() error {
	if _, ok := thc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "TodoHack.history_time"`)}
	}
	if _, ok := thc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "TodoHack.operation"`)}
	}
	if v, ok := thc.mutation.Operation(); ok {
		if err := todohack.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "TodoHack.operation": %w`, err)}
		}
	}
	if _, ok := thc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TodoHack.name"`)}
	}
	if v, ok := thc.mutation.Name(); ok {
		if err := todohack.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TodoHack.name": %w`, err)}
		}
	}
	return nil
}

func (thc *TodoHackCreate) sqlSave(ctx context.Context) (*TodoHack, error) {
	if err := thc.check(); err != nil {
		return nil, err
	}
	_node, _spec := thc.createSpec()
	if err := sqlgraph.CreateNode(ctx, thc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	thc.mutation.id = &_node.ID
	thc.mutation.done = true
	return _node, nil
}

func (thc *TodoHackCreate) createSpec() (*TodoHack, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoHack{config: thc.config}
		_spec = sqlgraph.NewCreateSpec(todohack.Table, sqlgraph.NewFieldSpec(todohack.FieldID, field.TypeUUID))
	)
	if id, ok := thc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := thc.mutation.HistoryTime(); ok {
		_spec.SetField(todohack.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := thc.mutation.Ref(); ok {
		_spec.SetField(todohack.FieldRef, field.TypeUUID, value)
		_node.Ref = value
	}
	if value, ok := thc.mutation.Operation(); ok {
		_spec.SetField(todohack.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := thc.mutation.OtherID(); ok {
		_spec.SetField(todohack.FieldOtherID, field.TypeUUID, value)
		_node.OtherID = value
	}
	if value, ok := thc.mutation.Name(); ok {
		_spec.SetField(todohack.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// TodoHackCreateBulk is the builder for creating many TodoHack entities in bulk.
type TodoHackCreateBulk struct {
	config
	err      error
	builders []*TodoHackCreate
}

// Save creates the TodoHack entities in the database.
func (thcb *TodoHackCreateBulk) Save(ctx context.Context) ([]*TodoHack, error) {
	if thcb.err != nil {
		return nil, thcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(thcb.builders))
	nodes := make([]*TodoHack, len(thcb.builders))
	mutators := make([]Mutator, len(thcb.builders))
	for i := range thcb.builders {
		func(i int, root context.Context) {
			builder := thcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoHackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, thcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, thcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, thcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (thcb *TodoHackCreateBulk) SaveX(ctx context.Context) []*TodoHack {
	v, err := thcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thcb *TodoHackCreateBulk) Exec(ctx context.Context) error {
	_, err := thcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thcb *TodoHackCreateBulk) ExecX(ctx context.Context) {
	if err := thcb.Exec(ctx); err != nil {
		panic(err)
	}
}
