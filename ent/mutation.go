// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nixxxon/entdemo/ent/predicate"
	"github.com/nixxxon/entdemo/ent/schema/optype"
	"github.com/nixxxon/entdemo/ent/todo"
	"github.com/nixxxon/entdemo/ent/todohack"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTodo     = "Todo"
	TypeTodoHack = "TodoHack"
)

// TodoMutation represents an operation that mutates the Todo nodes in the graph.
type TodoMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	other_id      *uuid.UUID
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Todo, error)
	predicates    []predicate.Todo
}

var _ ent.Mutation = (*TodoMutation)(nil)

// todoOption allows management of the mutation configuration using functional options.
type todoOption func(*TodoMutation)

// newTodoMutation creates new mutation for the Todo entity.
func newTodoMutation(c config, op Op, opts ...todoOption) *TodoMutation {
	m := &TodoMutation{
		config:        c,
		op:            op,
		typ:           TypeTodo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTodoID sets the ID field of the mutation.
func withTodoID(id uuid.UUID) todoOption {
	return func(m *TodoMutation) {
		var (
			err   error
			once  sync.Once
			value *Todo
		)
		m.oldValue = func(ctx context.Context) (*Todo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Todo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTodo sets the old Todo of the mutation.
func withTodo(node *Todo) todoOption {
	return func(m *TodoMutation) {
		m.oldValue = func(context.Context) (*Todo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Todo entities.
func (m *TodoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TodoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TodoMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Todo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOtherID sets the "other_id" field.
func (m *TodoMutation) SetOtherID(u uuid.UUID) {
	m.other_id = &u
}

// OtherID returns the value of the "other_id" field in the mutation.
func (m *TodoMutation) OtherID() (r uuid.UUID, exists bool) {
	v := m.other_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherID returns the old "other_id" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldOtherID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherID: %w", err)
	}
	return oldValue.OtherID, nil
}

// ClearOtherID clears the value of the "other_id" field.
func (m *TodoMutation) ClearOtherID() {
	m.other_id = nil
	m.clearedFields[todo.FieldOtherID] = struct{}{}
}

// OtherIDCleared returns if the "other_id" field was cleared in this mutation.
func (m *TodoMutation) OtherIDCleared() bool {
	_, ok := m.clearedFields[todo.FieldOtherID]
	return ok
}

// ResetOtherID resets all changes to the "other_id" field.
func (m *TodoMutation) ResetOtherID() {
	m.other_id = nil
	delete(m.clearedFields, todo.FieldOtherID)
}

// SetName sets the "name" field.
func (m *TodoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TodoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TodoMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the TodoMutation builder.
func (m *TodoMutation) Where(ps ...predicate.Todo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TodoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TodoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Todo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TodoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TodoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Todo).
func (m *TodoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodoMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.other_id != nil {
		fields = append(fields, todo.FieldOtherID)
	}
	if m.name != nil {
		fields = append(fields, todo.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case todo.FieldOtherID:
		return m.OtherID()
	case todo.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case todo.FieldOtherID:
		return m.OldOtherID(ctx)
	case todo.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Todo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case todo.FieldOtherID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherID(v)
		return nil
	case todo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Todo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(todo.FieldOtherID) {
		fields = append(fields, todo.FieldOtherID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodoMutation) ClearField(name string) error {
	switch name {
	case todo.FieldOtherID:
		m.ClearOtherID()
		return nil
	}
	return fmt.Errorf("unknown Todo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodoMutation) ResetField(name string) error {
	switch name {
	case todo.FieldOtherID:
		m.ResetOtherID()
		return nil
	case todo.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Todo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Todo edge %s", name)
}

// TodoHackMutation represents an operation that mutates the TodoHack nodes in the graph.
type TodoHackMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	history_time  *time.Time
	ref           *uuid.UUID
	operation     *optype.OpType
	other_id      *uuid.UUID
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TodoHack, error)
	predicates    []predicate.TodoHack
}

var _ ent.Mutation = (*TodoHackMutation)(nil)

// todohackOption allows management of the mutation configuration using functional options.
type todohackOption func(*TodoHackMutation)

// newTodoHackMutation creates new mutation for the TodoHack entity.
func newTodoHackMutation(c config, op Op, opts ...todohackOption) *TodoHackMutation {
	m := &TodoHackMutation{
		config:        c,
		op:            op,
		typ:           TypeTodoHack,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTodoHackID sets the ID field of the mutation.
func withTodoHackID(id uuid.UUID) todohackOption {
	return func(m *TodoHackMutation) {
		var (
			err   error
			once  sync.Once
			value *TodoHack
		)
		m.oldValue = func(ctx context.Context) (*TodoHack, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TodoHack.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTodoHack sets the old TodoHack of the mutation.
func withTodoHack(node *TodoHack) todohackOption {
	return func(m *TodoHackMutation) {
		m.oldValue = func(context.Context) (*TodoHack, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodoHackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodoHackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TodoHack entities.
func (m *TodoHackMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TodoHackMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TodoHackMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TodoHack.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHistoryTime sets the "history_time" field.
func (m *TodoHackMutation) SetHistoryTime(t time.Time) {
	m.history_time = &t
}

// HistoryTime returns the value of the "history_time" field in the mutation.
func (m *TodoHackMutation) HistoryTime() (r time.Time, exists bool) {
	v := m.history_time
	if v == nil {
		return
	}
	return *v, true
}

// OldHistoryTime returns the old "history_time" field's value of the TodoHack entity.
// If the TodoHack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoHackMutation) OldHistoryTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHistoryTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHistoryTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHistoryTime: %w", err)
	}
	return oldValue.HistoryTime, nil
}

// ResetHistoryTime resets all changes to the "history_time" field.
func (m *TodoHackMutation) ResetHistoryTime() {
	m.history_time = nil
}

// SetRef sets the "ref" field.
func (m *TodoHackMutation) SetRef(u uuid.UUID) {
	m.ref = &u
}

// Ref returns the value of the "ref" field in the mutation.
func (m *TodoHackMutation) Ref() (r uuid.UUID, exists bool) {
	v := m.ref
	if v == nil {
		return
	}
	return *v, true
}

// OldRef returns the old "ref" field's value of the TodoHack entity.
// If the TodoHack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoHackMutation) OldRef(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRef: %w", err)
	}
	return oldValue.Ref, nil
}

// ClearRef clears the value of the "ref" field.
func (m *TodoHackMutation) ClearRef() {
	m.ref = nil
	m.clearedFields[todohack.FieldRef] = struct{}{}
}

// RefCleared returns if the "ref" field was cleared in this mutation.
func (m *TodoHackMutation) RefCleared() bool {
	_, ok := m.clearedFields[todohack.FieldRef]
	return ok
}

// ResetRef resets all changes to the "ref" field.
func (m *TodoHackMutation) ResetRef() {
	m.ref = nil
	delete(m.clearedFields, todohack.FieldRef)
}

// SetOperation sets the "operation" field.
func (m *TodoHackMutation) SetOperation(ot optype.OpType) {
	m.operation = &ot
}

// Operation returns the value of the "operation" field in the mutation.
func (m *TodoHackMutation) Operation() (r optype.OpType, exists bool) {
	v := m.operation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperation returns the old "operation" field's value of the TodoHack entity.
// If the TodoHack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoHackMutation) OldOperation(ctx context.Context) (v optype.OpType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperation: %w", err)
	}
	return oldValue.Operation, nil
}

// ResetOperation resets all changes to the "operation" field.
func (m *TodoHackMutation) ResetOperation() {
	m.operation = nil
}

// SetOtherID sets the "other_id" field.
func (m *TodoHackMutation) SetOtherID(u uuid.UUID) {
	m.other_id = &u
}

// OtherID returns the value of the "other_id" field in the mutation.
func (m *TodoHackMutation) OtherID() (r uuid.UUID, exists bool) {
	v := m.other_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherID returns the old "other_id" field's value of the TodoHack entity.
// If the TodoHack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoHackMutation) OldOtherID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherID: %w", err)
	}
	return oldValue.OtherID, nil
}

// ClearOtherID clears the value of the "other_id" field.
func (m *TodoHackMutation) ClearOtherID() {
	m.other_id = nil
	m.clearedFields[todohack.FieldOtherID] = struct{}{}
}

// OtherIDCleared returns if the "other_id" field was cleared in this mutation.
func (m *TodoHackMutation) OtherIDCleared() bool {
	_, ok := m.clearedFields[todohack.FieldOtherID]
	return ok
}

// ResetOtherID resets all changes to the "other_id" field.
func (m *TodoHackMutation) ResetOtherID() {
	m.other_id = nil
	delete(m.clearedFields, todohack.FieldOtherID)
}

// SetName sets the "name" field.
func (m *TodoHackMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TodoHackMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TodoHack entity.
// If the TodoHack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoHackMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TodoHackMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the TodoHackMutation builder.
func (m *TodoHackMutation) Where(ps ...predicate.TodoHack) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TodoHackMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TodoHackMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TodoHack, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TodoHackMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TodoHackMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TodoHack).
func (m *TodoHackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodoHackMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.history_time != nil {
		fields = append(fields, todohack.FieldHistoryTime)
	}
	if m.ref != nil {
		fields = append(fields, todohack.FieldRef)
	}
	if m.operation != nil {
		fields = append(fields, todohack.FieldOperation)
	}
	if m.other_id != nil {
		fields = append(fields, todohack.FieldOtherID)
	}
	if m.name != nil {
		fields = append(fields, todohack.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodoHackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case todohack.FieldHistoryTime:
		return m.HistoryTime()
	case todohack.FieldRef:
		return m.Ref()
	case todohack.FieldOperation:
		return m.Operation()
	case todohack.FieldOtherID:
		return m.OtherID()
	case todohack.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodoHackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case todohack.FieldHistoryTime:
		return m.OldHistoryTime(ctx)
	case todohack.FieldRef:
		return m.OldRef(ctx)
	case todohack.FieldOperation:
		return m.OldOperation(ctx)
	case todohack.FieldOtherID:
		return m.OldOtherID(ctx)
	case todohack.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown TodoHack field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoHackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case todohack.FieldHistoryTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHistoryTime(v)
		return nil
	case todohack.FieldRef:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRef(v)
		return nil
	case todohack.FieldOperation:
		v, ok := value.(optype.OpType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperation(v)
		return nil
	case todohack.FieldOtherID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherID(v)
		return nil
	case todohack.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown TodoHack field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodoHackMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodoHackMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoHackMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TodoHack numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodoHackMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(todohack.FieldRef) {
		fields = append(fields, todohack.FieldRef)
	}
	if m.FieldCleared(todohack.FieldOtherID) {
		fields = append(fields, todohack.FieldOtherID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodoHackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodoHackMutation) ClearField(name string) error {
	switch name {
	case todohack.FieldRef:
		m.ClearRef()
		return nil
	case todohack.FieldOtherID:
		m.ClearOtherID()
		return nil
	}
	return fmt.Errorf("unknown TodoHack nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodoHackMutation) ResetField(name string) error {
	switch name {
	case todohack.FieldHistoryTime:
		m.ResetHistoryTime()
		return nil
	case todohack.FieldRef:
		m.ResetRef()
		return nil
	case todohack.FieldOperation:
		m.ResetOperation()
		return nil
	case todohack.FieldOtherID:
		m.ResetOtherID()
		return nil
	case todohack.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown TodoHack field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodoHackMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodoHackMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodoHackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodoHackMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodoHackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodoHackMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodoHackMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TodoHack unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodoHackMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TodoHack edge %s", name)
}
